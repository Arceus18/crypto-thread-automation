#!/usr/bin/env node

// Working automation.js for GitHub Actions
console.log('🔧 Starting automation.js...');

// Use dynamic import for ESM compatibility
async function runAutomation() {
    try {
        console.log('📊 Checking environment variables...');
        
        const geminiKey = process.env.GEMINI_API_KEY;
        const telegramToken = process.env.TELEGRAM_BOT_TOKEN;
        const telegramChatId = process.env.TELEGRAM_CHAT_ID;
        
        console.log('- GEMINI_API_KEY:', geminiKey ? '✅ Found' : '❌ Missing');
        console.log('- TELEGRAM_BOT_TOKEN:', telegramToken ? '✅ Found' : '❌ Missing');
        console.log('- TELEGRAM_CHAT_ID:', telegramChatId ? '✅ Found' : '❌ Missing');
        
        if (!geminiKey || !telegramToken || !telegramChatId) {
            throw new Error('Missing required environment variables');
        }
        
        // Import Gemini AI (using dynamic import for compatibility)
        console.log('🤖 Loading Gemini AI...');
        const { GoogleGenerativeAI } = await import('@google/generative-ai');
        const genAI = new GoogleGenerativeAI(geminiKey);
        
        console.log('📱 Sending test message to Telegram...');
        await sendToTelegram('🚀 Crypto automation started! Generating content...', telegramToken, telegramChatId);
        
        console.log('🧠 Generating crypto content with AI...');
        const model = genAI.getGenerativeModel({ model: 'gemini-2.0-flash-exp' });
        
        const prompt = `Create a 6-tweet Twitter thread about current cryptocurrency trends. Make it informative and engaging. Include relevant hashtags. Format as:

Tweet 1/6: [engaging opener about crypto trends]
Tweet 2/6: [key insight or trend]
Tweet 3/6: [specific project or development]
Tweet 4/6: [market analysis or data]
Tweet 5/6: [actionable advice]
Tweet 6/6: [conclusion with call to action]

Focus on what's happening now in crypto markets.`;

        const result = await model.generateContent(prompt);
        const response = result.response;
        const threadContent = response.text();
        
        const finalMessage = `🧵 **Your Daily Crypto Thread is Ready!**

${threadContent}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

✨ **Ready to post on Twitter!**
💡 **Tip:** Copy each tweet individually for best results
🚀 **Generated by your automated crypto research bot**`;
        
        console.log('📤 Sending complete thread to Telegram...');
        await sendToTelegram(finalMessage, telegramToken, telegramChatId);
        
        console.log('✅ Automation completed successfully!');
        
    } catch (error) {
        console.error('❌ Automation failed:', error.message);
        console.error('Stack trace:', error.stack);
        
        // Try to send error to Telegram
        try {
            await sendToTelegram(`❌ Crypto automation failed: ${error.message}`, 
                process.env.TELEGRAM_BOT_TOKEN, process.env.TELEGRAM_CHAT_ID);
        } catch (telegramError) {
            console.error('❌ Could not send error to Telegram:', telegramError.message);
        }
        
        process.exit(1); // Exit with error code
    }
}

async function sendToTelegram(message, token, chatId) {
    console.log(`📱 Sending to Telegram chat: ${chatId.substring(0, 3)}...`);
    
    // Use node-fetch or built-in fetch
    let fetch;
    try {
        fetch = globalThis.fetch || (await import('node-fetch')).default;
    } catch {
        fetch = globalThis.fetch;
    }
    
    const url = `https://api.telegram.org/bot${token}/sendMessage`;
    
    const response = await fetch(url, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            chat_id: chatId,
            text: message,
            parse_mode: 'Markdown',
            disable_web_page_preview: true
        })
    });
    
    if (!response.ok) {
        const errorText = await response.text();
        console.error('Telegram API response:', errorText);
        throw new Error(`Telegram API error (${response.status}): ${errorText}`);
    }
    
    const result = await response.json();
    console.log('✅ Message sent successfully!');
    return result;
}

// Run the automation
console.log('🚀 Initializing crypto automation...');
runAutomation();
